{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"call",
				"callback_query"
			],
			[
				"active",
				"active_coach"
			],
			[
				"job",
				"job_queue〔argument〕"
			],
			[
				"sched",
				"scheduled_dt"
			],
			[
				"scheduled",
				"scheduled_at"
			],
			[
				"Gra",
				"Gratitude.AWAITING_REASONS"
			],
			[
				"grat",
				"gratitude_states〔argument〕"
			],
			[
				"AWA",
				"AWAITING_REASONS〔variable〕"
			],
			[
				"gra",
				"gratitude_states〔argument〕"
			],
			[
				"gratu",
				"gratitudes〔argument〕"
			],
			[
				"test",
				"test_db〔argument〕"
			],
			[
				"tes",
				"test_database〔module〕"
			],
			[
				"create",
				"create_users〔function〕"
			],
			[
				"AWAI",
				"AWAITING_GRATITUDE"
			],
			[
				"coll",
				"collector"
			],
			[
				"coach",
				"coach_name〔variable〕"
			],
			[
				"tele",
				"telegram_id"
			],
			[
				"jb",
				"job_queue"
			],
			[
				"schedul",
				"scheduled_remaining"
			],
			[
				"handl",
				"handle_coach_selection〔function〕"
			],
			[
				"AW",
				"AWAITING_COACH_SELECTION〔variable〕"
			],
			[
				"AWAITING",
				"AWAITING_SELECTION_CONFIRMATION"
			],
			[
				"Coach",
				"CoachSetup"
			],
			[
				"update",
				"update_handler〔function〕"
			],
			[
				"send",
				"sendMessage"
			],
			[
				"keyb",
				"keyboard_options〔variable〕"
			],
			[
				"inline",
				"inline_keyboad"
			],
			[
				"diar",
				"diary_entry〔variable〕"
			],
			[
				"custom",
				"custom_update〔module〕"
			],
			[
				"tg",
				"tg_get_or_create"
			],
			[
				"from",
				"from_user"
			],
			[
				"add",
				"add_handler"
			],
			[
				"config",
				"config_update"
			],
			[
				"In",
				"InlineKeyboardMarkup"
			],
			[
				"A",
				"AWAITING_SELECTION_CONFIRMATION〔variable〕"
			],
			[
				"messa",
				"message_fix"
			],
			[
				"wake",
				"wake_time"
			],
			[
				"__name",
				"__name__ == '__main__':〔variable〕"
			],
			[
				"authori",
				"author_id"
			],
			[
				"author",
				"author_id"
			],
			[
				"auth",
				"authorize"
			],
			[
				"filter",
				"filter_by"
			],
			[
				"Lin",
				"LinkedPicturePercept〔module〕"
			],
			[
				"perce",
				"percept_assocs〔argument〕"
			],
			[
				"get",
				"get_percept"
			],
			[
				"per",
				"percept_assocs〔argument〕"
			],
			[
				"tho",
				"thought_with_attachments"
			],
			[
				"curren",
				"current_user〔module〕"
			],
			[
				"percept",
				"percept_assocs"
			],
			[
				"th",
				"thought_with_attachments〔argument〕"
			],
			[
				"thought",
				"thought_with_attachments〔argument〕"
			],
			[
				"thought_",
				"thought_with_attachments"
			],
			[
				"upda",
				"update_comment_count"
			],
			[
				"thougt",
				"thought_data"
			],
			[
				"current",
				"current_upvotes〔variable〕"
			],
			[
				"Link",
				"LinkPercept"
			],
			[
				"find",
				"find_mentions〔function〕"
			],
			[
				"epoc",
				"epoch_seconds"
			],
			[
				"epoch",
				"epoch_seconds〔variable〕"
			],
			[
				"moveme",
				"movement_with_thoughts〔argument〕"
			],
			[
				"movem",
				"movement_with_thoughts〔argument〕"
			],
			[
				"move",
				"movement_with_thoughts〔argument〕"
			],
			[
				"movement",
				"movement_with_thoughts"
			],
			[
				"invitation",
				"invitation_code"
			],
			[
				"vali",
				"valid_invitation"
			],
			[
				"valid",
				"valid_invitation〔variable〕"
			],
			[
				"acti",
				"active_member"
			],
			[
				"toggl",
				"toggle_movement_membership"
			],
			[
				"toggle",
				"toggle_movement_membership〔function〕"
			],
			[
				"is",
				"is_authenticated"
			],
			[
				"is_a",
				"is_authenticated"
			],
			[
				"Not",
				"Notification〔module〕"
			],
			[
				"Perce",
				"PerceptAssociation〔module〕"
			],
			[
				"TOP",
				"TOP_THOUGHT_CACHE_DURATION〔variable〕"
			],
			[
				"Re",
				"ReplyNotification〔module〕"
			],
			[
				"Ment",
				"MentionNotification〔class〕"
			],
			[
				"Uni",
				"UniqueConstraint"
			],
			[
				"ATTENT",
				"ATTENTION_MULT"
			],
			[
				"refres",
				"refresh_upvote_count"
			],
			[
				"refre",
				"refresh_recent_thoughts〔function〕"
			],
			[
				"Base",
				"BaseModel〔class〕"
			],
			[
				"pa",
				"pathsep〔variable〕"
			],
			[
				"func",
				"func_wrapper〔function〕"
			],
			[
				"frontpage",
				"frontpage_sources"
			],
			[
				"percep",
				"percept_assocs"
			],
			[
				"mindspace",
				"mindspace_top_thought"
			],
			[
				"mindsa",
				"mindspace_top_thought"
			],
			[
				"refresh_",
				"refresh_upvote_count〔function〕"
			],
			[
				"amplite",
				"amplitudeProps"
			],
			[
				"act",
				"active_persona"
			],
			[
				"sour",
				"source_idents"
			],
			[
				"top",
				"top_post_selection"
			],
			[
				"help",
				"help_page"
			],
			[
				"conver",
				"conversation_list"
			],
			[
				"conv",
				"conv_dict"
			],
			[
				"anim",
				"anim_duration〔variable〕"
			],
			[
				"top_global",
				"top_global|length"
			],
			[
				"recent",
				"recent_thoughts〔module〕"
			],
			[
				"cache",
				"cache_key"
			],
			[
				"cahce",
				"cache_key"
			],
			[
				"SQL",
				"SQLAlchemyError"
			],
			[
				"node",
				"node_indexes〔variable〕"
			],
			[
				"email",
				"email_pref"
			],
			[
				"not",
				"notifcation"
			],
			[
				"Noti",
				"Notification"
			],
			[
				"Th",
				"Thought〔module〕"
			],
			[
				"time",
				"time_start"
			],
			[
				"nucleu",
				"nucleus_logger〔variable〕"
			],
			[
				"overflo",
				"overflow-y"
			],
			[
				"can",
				"candidate"
			],
			[
				"persona",
				"persona_blog"
			],
			[
				"catch",
				"catchall_enabled"
			],
			[
				"Email",
				"EmailPrefsForm〔module〕"
			],
			[
				"Bool",
				"Boolean"
			],
			[
				"delet",
				"delete_id"
			],
			[
				"delete",
				"delete_memoized"
			],
			[
				"commtn",
				"comment_count"
			],
			[
				"htt",
				"http_auth〔class〕"
			],
			[
				"HTTP",
				"HTTPDigestAuth〔module〕"
			],
			[
				"pers",
				"persona_blog"
			],
			[
				"mindsp",
				"mindspace_top_thought"
			],
			[
				"blog",
				"blog_data"
			],
			[
				"primar",
				"primaryjoin"
			],
			[
				"ATT",
				"ATTENTION_MULT〔variable〕"
			],
			[
				"Value",
				"ValueError〔class〕"
			],
			[
				"re",
				"required_votes〔function〕"
			],
			[
				"upvote",
				"upvote_count"
			],
			[
				"member",
				"member_count"
			]
		]
	},
	"buffers":
	[
		{
			"file": "displaybot.sublime-project",
			"settings":
			{
				"buffer_size": 91,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/usr/bin/env python\n# coding: utf-8\n\n# The Displaybot should show a window on a small wall-mounted display that plays gifs and videos from a telegram group or tunes to a web radio station.\nimport os\nimport logging\n\nfrom telegram.ext import Updater, CommandHandler, MessageHandler, CallbackQueryHandler\n\n# Use appdata to store all persistent application state\nappdata = dict()\n\nDATA_DIR = os.path.expanduser(os.path.join(\"~\", \".displayBot\"))\n\nlogger = logging.getLogger(\"oxo\")\nlogger.setLevel(logging.DEBUG)\n\njqlogger = logging.getLogger(\"JobQueue\")\njqlogger.setLevel(logging.WARNING)\n\n# create a file handler\nlog_dir = os.path.join(DATA_DIR, \"hello.log\")\nhandler = logging.FileHandler(log_dir)\nhandler.setLevel(logging.DEBUG)\n\n# console handler\nconsole_handler = logging.StreamHandler()\nconsole_handler.setLevel(logging.INFO)\n\n# create a logging format\nlogfmt = '%(asctime)s %(levelname)s\\t: %(message)s'\ntmfmt = \"%m/%d %H:%M:%S\"\nformatter = logging.Formatter(logfmt, tmfmt)\nhandler.setFormatter(formatter)\n\nlogfmt1 = '%(asctime)s: %(message)s'\nformatter1 = logging.Formatter(logfmt1, tmfmt)\nconsole_handler.setFormatter(formatter1)\n\n# add the handlers to the logger\nlogger.addHandler(handler)\njqlogger.addHandler(handler)\nlogger.addHandler(console_handler)\njqlogger.addHandler(console_handler)\n\nlogger.info(\"Logging to {}\".format(log_dir))\n\n\nTELEGRAM_API_TOKEN = \"YOUR TOKEN HERE\"\nwith open(os.path.join(DATA_DIR, \"TELEGRAM_API_TOKEN\")) as f:\n    TELEGRAM_API_TOKEN = f.read().strip()\n\n# As anyone will be able to add the bot and add pictures to your display,\n# you can filter telegram usernames here\nALLOWED_USERS = []\n\nSUPPORTED_TYPES = [\"video/mp4\", \"video/webm\", \"image/gif\"]\n\nSERVER_URL = \"http://localhost:3000\"\n\nplaynext = None\n\n\n# ## Basic commands for a bot\n#\n# Define a few command handlers for Telegram. These usually take the two arguments bot and\n# update. Error handlers also receive the raised TelegramError object in error.\n#\n# The start command is sent when the bot is started.\n\n# In[2]:\n\ndef start(bot, update):\n    update.message.reply_text('Gimme dat gif. Send an .mp4 link!')\n\n\n# Handle errors, just in case\n\n# In[3]:\n\ndef error(bot, update, error):\n    logger.warn('Update \"%s\" caused error \"%s\"' % (update, error))\n\n\n# ## Receive clips from Telegram\n#\n# Next ist the receiver for our app. It will look at incoming messages and determine, whether they contain a link and then wether that link points at an mp4 video. This will then be added to the database for display.\n#\n# There are special cases:\n# - if `url` ends in `gifv`, that is rewritten to `mp4`\n# - if `url` ends in `gif`, the gif is downloaded and converted to a local `mp4` (see code for that below)\n\n# In[4]:\n\nimport requests\n\ndef receive(bot, update):\n    # Add attachments\n    doc = update.message.document\n    try:\n        if doc:\n            logger.debug(\"Processing attachment\")\n            file_data = bot.getFile(doc.file_id)\n            logger.debug(\"Downloading {}\".format(file_data[\"file_path\"]))\n            download_clip(file_data[\"file_path\"], bot, update, doc[\"mime_type\"],\n                fname=doc[\"file_name\"])\n    except Exception as e:\n        logger.error(e, exc_info=True)\n\n\n    # Add all URLs in the message\n    elems = update.message.parse_entities(types=[\"url\"])\n    for elem in elems:\n        logger.info(\"Processing message with {} url entities\".format(len(elems)))\n        url = update.message.text[elem.offset:(elem.offset + elem.length)]\n\n        # Rewrite gifv links extension and try that\n        if url[-4:] == \"gifv\":\n            url = url[:-4] + \"mp4\"\n            logger.debug(\"Rewrite .gifv to {}\".format(url))\n\n        try:\n            link = requests.head(url, allow_redirects=True)\n            logger.debug(link)\n\n        except requests.exceptions.RequestException:\n            logger.warning(\"Link not valid\")\n            update.message.reply_text(\"Link not valid\")\n\n        else:\n            if \"Content-Type\" in link.headers:\n                download_clip(\n                    url=url,\n                    bot=bot,\n                    update=update,\n                    content_type=link.headers[\"Content-Type\"])\n            else:\n                logger.info(\"Link not supported: {}\".format(link.headers))\n\n\n# ## Download and file clips\n#\n# Then write a handler to store received videos in the database and computes a cached JSON response on disk with all current videos\n\n# In[5]:\n\nimport os\nimport tempfile\nimport datetime\n\nfrom sh import rm\n\ndef download_clip(url, bot, update, content_type, fname=None):\n    global appdata\n\n    if not fname:\n        fname = url.split(\"/\")[-1]\n\n    author = update.message.from_user.first_name\n    if content_type not in SUPPORTED_TYPES:\n        logger.info(\"Link not supported: \\n{}\\nType{}\".format(\n            url, content_type))\n    if duplicate(fname):\n        logger.info(\"Detected duplicate {}\".format(fname))\n        update.message.reply_text(\"👾 Reposter!\")\n    else:\n        fpath = os.path.join(DATA_DIR, \"clips\", fname)\n        logger.debug(\"Downloading clip to {}...\".format(fpath))\n\n        with open(fpath, \"w+\") as f:\n            r = requests.get(url, stream=True)\n\n            if r.ok:\n                for block in r.iter_content(1024):\n                    f.write(block)\n            else:\n                logger.error(\"Download failed {}\".format(r))\n\n        # Convert gif files using ffmpeg\n        if url[-3:] == \"gif\":\n            fpath = convert_gif(fpath)\n            fname = os.path.basename(fpath)\n\n        clip = {\n            \"url\": url,\n            \"author\": author,\n            \"filename\": fname,\n            \"created\": datetime.datetime.now().isoformat()\n        }\n        appdata[\"clips\"].append(clip)\n        appdata[\"incoming\"] = clip\n        save()\n\n        bot.sendMessage(chat_id=update.message.chat_id, text=\"👾 Added video to database.\")\n        logger.info(\"Saved new clip {} from {}\".format(fname, author))\n\n\ndef duplicate(filename):\n    return len([c for c in appdata[\"clips\"]\n        if \"filename\" in c and c[\"filename\"] == filename]) > 0\n\n\n\n# ## Converting gifs\n#\n# In order to convert gifs to the less ressource intensive mp4 format, we can use the ffmpy library, which calls ffmpeg for us outside of python, to make the conversion.\n#\n# This function creates a temporary file and writes the gif to it. Then ffmpeg is called with settings for converting a gif to an mp4 and the result is stored in `frontend/public/videos/`, where the frontend script will be able to access it.\n\n# In[6]:\n\nimport ffmpy\n\ndef convert_gif(fpath):\n    logger.info(\"Converting gif to mp4...\")\n\n    new_fpath = fpath + \".mp4\"\n\n    ff = ffmpy.FFmpeg(\n        inputs={\n            fpath: None\n        },\n        outputs={\n            new_fpath: '-pix_fmt yuv420p -vf \"scale=trunc(iw/2)*2:trunc(ih/2)*2\"'\n        }\n    )\n    ff.run()\n    return new_fpath\n\n\n# ## Config persistence\n#\n# We use a dictionary to store all application data and serialize it in a JSON file.\n\n# In[7]:\n\nimport json\n\nconfig_fname = os.path.join(DATA_DIR, \"data.json\")\ndef load():\n    global appdata\n\n    try:\n        with open(config_fname) as f:\n            appdata = json.load(f)\n    except IOError, ValueError:\n        logger.info(\"Bootstrap config loaded\")\n        appdata = {\n            \"clips\": [],\n            \"incoming\": None,\n            \"station_playing\": None,\n            \"station_playing_sent\": None,\n            \"station_title\": None,\n            \"station_title_sent\": None,\n            \"stations\": {\n                \"91.4\": \"http://138.201.251.233/brf_128\",\n                \"deutschlandfunk\": \"http://dradio_mp3_dlf_m.akacast.akamaistream.net/7/249/142684/v1/gnl.akacast.akamaistream.net/dradio_mp3_dlf_m\",\n                \"dradio-kultur\": \"http://dradio_mp3_dkultur_m.akacast.akamaistream.net/7/530/142684/v1/gnl.akacast.akamaistream.net/dradio_mp3_dkultur_m\",\n                \"dronezone\": \"http://ice1.somafm.com/dronezone-128-aac\",\n                \"fip\": \"http://direct.fipradio.fr/live/fip-midfi.mp3\",\n                \"fip du groove\": \"http://direct.fipradio.fr/live/fip-webradio3.mp3\",\n                \"fip du jazz\": \"http://direct.fipradio.fr/live/fip-webradio2.mp3\",\n                \"fip du monde\": \"http://direct.fipradio.fr/live/fip-webradio4.mp3\",\n                \"fip du reggae\": \"http://direct.fipradio.fr/live/fip-webradio6.mp3\",\n                \"fip du rock\": \"http://direct.fipradio.fr/live/fip-webradio1.mp3\",\n                \"fip tout nouveau\": \"http://direct.fipradio.fr/live/fip-webradio5.mp3\"\n            }\n        }\n\n    logger.debug(\"@LOAD {} clips\".format(len(appdata[\"clips\"])))\n    return appdata\n\ndef save():\n    global appdata\n\n    logger.debug(\"@SAVE {} clips\".format(len(appdata[\"clips\"])))\n    with open(config_fname, \"w\") as f:\n        json.dump(appdata, f, indent=2, sort_keys=True)\n\n\n\n\n# ## Videoplayer and Radio\n\n# In[9]:\nimport wikipedia\n\nfrom sh import mplayer, ErrorReturnCode_1\nfrom time import sleep\nfrom random import choice\nfrom collections import OrderedDict\n\n# ## Radio player\nfrom threading import Thread\nfrom telegram.ext import Job\nfrom telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, ChatAction\n\ndef inline_keyboard(options):\n    \"\"\"Return an inline Keyboard given a dictionary of callback:display pairs.\"\"\"\n    rv = InlineKeyboardMarkup([[InlineKeyboardButton(v, callback_data=k)]\n        for k, v in options.items()])\n    return rv\n\ndef log_exceptions(func):\n    def wrapper(*args, **kwargs):\n        try:\n            func(*args, **kwargs)\n        except Exception as e:\n            logger.error(e, exc_info=True)\n    return wrapper\n\nclass Radio(Thread):\n    def __init__(self):\n        Thread.__init__(self)\n        self.url = None\n        self.player = None\n        self.logger = logging.getLogger(\"oxo\")\n\n    @log_exceptions\n    def run(self):\n        self.stopped = False\n        current_url = None\n        title = None\n        self.reset_title()\n\n        while not self.stopped:\n            self.update()\n            if current_url != self.url:\n                self.logger.debug(\"Station changed\")\n                if self.running:\n                    self.player.terminate()\n                    self.logger.info(\"Stopped running radio\")\n                    self.player = None\n                else:\n                    self.logger.debug(\"No radio playing previously\")\n\n                if self.url is not None:\n                    self.logger.info(\"Playing {}\".format(self.url))\n                    self.player = mplayer(self.url, \"-quiet\",\n                        _bg=True,\n                        _out=self.interact,\n                        _done=self.teardown,\n                        _ok_code=[0, 1])\n                current_url = self.url\n\n            elif title != self.title:\n                title = self.title\n                self.logger.info(\"Title is {}\".format(title))\n\n            sleep(1)\n\n    @property\n    def running(self):\n        return self.player is not None and self.player != ''\n\n    @classmethod\n    def interact(cls, line, stdin):\n        logger = logging.getLogger(\"oxo\")\n        if line.startswith(\"ICY\"):\n            logger.debug(\"Found ICY data: {}\".format(line))\n            s = \"StreamTitle=\"\n            start = line.find(s) + len(s) + 1\n            end = line.find(\";\", start) - 1\n            if start and end:\n                title = line[start:end]\n                logger.debug(\"Found title in ICY: {}\".format(title))\n                if len(title) > 0:\n                    global appdata\n                    appdata[\"station_title\"] = title\n\n    @classmethod\n    def teardown(cls, cmd, success, exit_code):\n        logger = logging.getLogger(\"oxo\")\n        logger.debug(\"Radio player {} exits with success {} and exit code {}\".format(cmd, success, exit_code))\n\n\n    def update(self):\n        global appdata\n        self.url = appdata[\"stations\"].get(appdata[\"station_playing\"])\n        self.title = appdata.get(\"station_title\")\n\n    @classmethod\n    def send_title(cls, bot, job):\n        logger = logging.getLogger(\"oxo\")\n        global appdata\n        t = appdata[\"station_title\"]\n        t0 = appdata[\"station_title_sent\"]\n        if t != t0:\n            if t:\n                msg = \"▶️ Now playing {}\".format(t)\n                bot.sendMessage(chat_id=job.context, text=msg)\n                if t.find(\" - \"):\n                    cls.send_research(t[:t.find(\" - \")], bot, job)\n                else:\n                    logger.debug(\"Not compiling research for this title\")\n            logger.debug(\"Title changed from '{}' to '{}'\".format(t0, t))\n            appdata[\"station_title_sent\"] = t\n            save()\n\n\n    @classmethod\n    def send_fip_title(cls, bot, job):\n        logger = logging.getLogger(\"oxo\")\n        global appdata\n\n        logger.debug(\"Requesting fip current track\")\n        last = appdata[\"station_title_sent\"]\n\n        fip_stations = {\n            \"fip\": 7,\n            \"fip du groove\": 66,\n            \"fip du jazz\": 65,\n            \"fip du monde\": 69,\n            \"fip du reggae\": 71,\n            \"fip du rock\": 64,\n            \"fip tout nouveau\": 70\n        }\n\n        fip_station = fip_stations.get(appdata[\"station_playing\"])\n        url = \"http://www.fipradio.fr/livemeta/{}\".format(fip_station)\n        req = requests.get(url)\n        data = req.json()\n\n        if \"levels\" not in data or len(data[\"levels\"]) == 0:\n            logger.warning(\"No data found in fip livemeta:\\n\\n{}\".format(data))\n            return None\n\n        position = data[\"levels\"][0][\"position\"]\n        currentItemId = data[\"levels\"][0]['items'][position]\n        currentItem = data[\"steps\"][currentItemId]\n\n        current = {\n            \"artist\": currentItem[\"authors\"].title() if \"authors\" in currentItem else None,\n            \"performer\": currentItem[\"performers\"].title() if \"performers\" in currentItem else None,\n            \"title\": currentItem[\"title\"].title() if \"title\" in currentItem else None,\n            \"album\": currentItem[\"titreAlbum\"].title() if \"titreAlbum\" in currentItem else None,\n            \"label\": currentItem[\"label\"].title() if \"label\" in currentItem else None,\n            \"image\": currentItem.get(\"visual\")\n        }\n\n        def titlestr(t):\n            if t:\n                return \"{} - {} ({})\".format(\n                    t[\"artist\"], t[\"title\"], t[\"album\"])\n            else:\n                return None\n\n        if titlestr(current) != last:\n            msg = u\"▶️ Now playing {artist} – _{title}_ \\nfrom {album}\".format(\n                title=current[\"title\"],\n                artist=current[\"artist\"],\n                album=current[\"album\"])\n\n            bot.sendMessage(chat_id=job.context,\n                text=msg,\n                disable_notification=True,\n                parse_mode=ParseMode.MARKDOWN)\n\n            appdata[\"station_title_sent\"] = titlestr(current)\n            save()\n\n            logger.debug(\"Title changed from '{}' to '{}'\".format(\n                last, titlestr(current)))\n\n            cls.send_research(\n                current[\"artist\"], bot, job, image_url=current[\"image\"])\n\n    @classmethod\n    def send_research(cls, subject, bot, job, image_url=None):\n            logger = logging.getLogger(\"oxo\")\n            logger.info(\"Researching '{}'\".format(subject))\n            bot.sendChatAction(chat_id=job.context, action=ChatAction.TYPING)\n\n            wp_articles = wikipedia.search(subject)\n            logger.debug(\"WP Articles: {}\".format(wp_articles))\n            if len(wp_articles) > 0:\n                for i in xrange(len(wp_articles)):\n                    try:\n                        wp = wikipedia.page(wp_articles[0])\n                        break\n                    except wikipedia.DisambiguationError:\n                        logger.warning(\"Wikipedia: DisambiguationError for {}\".format(wp_articles[0]))\n                else:\n                    logger.warning(\"Wikipedia articles exhausted\")\n                    return\n\n                logger.debug(\"Wikipedia: {}\".format(wp))\n                msg = u\"*{}*\\n{}\\n\\n[Wikipedia]({})\".format(\n                    wp.title, wp.summary, wp.url)\n\n                bot.sendMessage(chat_id=job.context,\n                    text=msg,\n                    disable_notification=True,\n                    disable_web_page_preview=True,\n                    parse_mode=ParseMode.MARKDOWN)\n\n                if image_url is None:\n                    wp_images = filter(lambda url: url.endswith(\"jpg\"), wp.images)\n                    image_url = wp_images[0] if len(wp_images) > 0 else None\n\n                if image_url:\n                    logger.debug(\"Sending photo {}\".format(image_url))\n                    try:\n                        bot.sendPhoto(chat_id=job.context, photo=image_url)\n                    except Exception as e:\n                        logger.error(e)\n            else:\n                logger.debug(\"No wikipedia articles found.\")\n\n\n\n    def reset_title(self):\n        global appdata\n        appdata[\"station_title\"] = None\n\n    def stop(self):\n        self.logger.debug(\"Stopping radio player...\")\n        self.stopped = True\n        if self.running:\n            try:\n                self.player.terminate()\n            except OSError as e:\n                self.logger.debug(\n                    \"Error stopping radio player '{}'\\n{}\".format(self.player, e), exc_info=True)\n            self.logger.info(\"Radio stopped\")\n        else:\n            self.logger.debug(\"Radio did not play\")\n\n    @classmethod\n    @log_exceptions\n    def telegram_command(cls, bot, update, job_queue, args=list()):\n        global appdata\n\n        # Remove the old title data job\n        if len(job_queue.jobs()) > 0:\n            job = job_queue.jobs()[0]\n            logger.debug(\"Removing {}\".format(job))\n            job.schedule_removal()\n\n        appdata[\"station_playing\"] = None\n        appdata[\"station_playing_sent\"] = None\n        save()\n\n        # Radio station selector\n        msg = \"⏹ Radio turned off.\\n\\nSelect a station to start.\"\n        kb = inline_keyboard(OrderedDict(\n            sorted({k:k for k in appdata[\"stations\"].keys()}.items())))\n        bot.sendMessage(chat_id=update.message.chat_id, text=msg,\n            reply_markup=kb)\n\n    @classmethod\n    @log_exceptions\n    def telegram_change_station(cls, bot, update, job_queue):\n        # Answer callback from radio station selector\n        global appdata\n        q = update.callback_query\n        station = q.data\n        if station in appdata[\"stations\"]:\n            logger.info(\"Requesting station {} (inline)\".format(station))\n            bot.answerCallbackQuery(q.id,\n                text=\"Tuning to {}...\".format(station))\n\n            appdata[\"station_playing\"] = station\n            save()\n\n            if station.startswith(\"fip\"):\n                logger.info(\"Starting fip api title crawler...\")\n                job_function = Radio.send_fip_title\n                delay = 7.0\n            else:\n                job_function = Radio.send_title\n                delay = 1.0\n\n            rv = Job(job_function,\n                delay, repeat=True, context=q.message.chat_id)\n            job_queue.put(rv)\n\n            bot.editMessageText(\n                text=\"📻 Changed station to {}.\".format(station),\n                chat_id=q.message.chat_id,\n                message_id=q.message.message_id)\n        else:\n            bot.answerCallbackQuery(q.id)\n            bot.sendMessage(q.message.chat_id,\n                text=\"I don't know about '{}'\".format(station))\n\n    @classmethod\n    @log_exceptions\n    def telegram_manual(cls, bot, update, args=list()):\n        global appdata\n\n        rv = \"\"\n        if len(args) == 1:\n            url = args[0]\n            logger.debug(\"Manual play requested: {}\".format(url))\n            try:\n                requests.head(url)\n            except requests.exceptions.RequestException:\n                logger.error(\"Requested URL invalid\")\n                rv = \"Can't play this URL\"\n            else:\n                appdata[\"stations\"][\"manual\"] = url\n                appdata[\"station_playing\"] = \"manual\"\n                appdata[\"station_playing_sent\"] = None\n                rv = \"Switching playback...\"\n                save()\n        else:\n            logger.warning(\"Manual play did not receive URL parameter\")\n            rv = \"Please send a URL with this command to play it.\"\n\n        bot.sendMessage(update.message.chat_id, text=rv)\n\n\nclass VideoPlayer(Thread):\n    def __init__(self):\n        Thread.__init__(self)\n        self.logger = logging.getLogger(\"oxo\")\n        self.close_player = False\n        self.stopped = False\n\n    @classmethod\n    def filepath(self, current_clip):\n        return os.path.join(DATA_DIR, \"clips\", current_clip[\"filename\"])\n\n    def run(self):\n        while not self.stopped:\n            current_clip = VideoPlayer.get_next()\n            self.logger.info(\"Starting video player with clip {}\".format(current_clip[\"filename\"]))\n            self.player = mplayer(self.filepath(current_clip),\n                \"-slave\",\n                \"-fs\",\n                \"-vo\", \"sdl\",\n                _bg=True,\n                _out=self.interact,\n                _done=self.teardown)\n            try:\n                self.player.wait()\n            except ErrorReturnCode_1:\n                self.logger.error(\"Video player returned code 1.\")\n        self.logger.debug(\"Exit video player\")\n\n    @property\n    def running(self):\n        return self.player and self.player is not None and self.player != ''\n\n    def stop(self):\n        self.logger.debug(\"Stopping video player\")\n        self.stopped = True\n        if self.running:\n            try:\n                self.player.terminate()\n            except OSError as e:\n                self.logger.debug(\n                    \"Error stopping video player '{}'\\n{}\".format(type(self.player), e), exc_info=True)\n            self.logger.info(\"Video player stopped\")\n        else:\n            self.logger.debug(\"Video player did not play\")\n\n    @classmethod\n    def interact(cls, line, stdin):\n        START_PLAYBACK = \"Starting playback...\"\n\n        logger = logging.getLogger(\"oxo\")\n        if START_PLAYBACK in line:\n            nextclip = cls.get_next()\n            path = cls.filepath(nextclip)\n            cmd = \"loadfile {} 1\\n\".format(path)\n            logger.info(\"Enqueued clip {}\".format(nextclip['filename']))\n            stdin.put(cmd)\n\n    @classmethod\n    def teardown(cls, cmd, success, exit_code):\n        logger = logging.getLogger(\"oxo\")\n        logger.debug(\"Video player {} exits with success {} and exit code {}\".format(cmd, success, exit_code))\n\n    @classmethod\n    def get_next(cls):\n        global appdata\n        logger = logging.getLogger(\"oxo\")\n\n        if \"incoming\" in appdata.keys() and appdata[\"incoming\"]:\n            rv = appdata[\"incoming\"]\n            appdata[\"incoming\"] = None\n            save()\n            logger.info(\"Enqueuing shortlisted clip {}\".format(rv[\"filename\"]))\n        elif len(appdata[\"clips\"]) > 0:\n            rv = choice(appdata[\"clips\"])\n        else:\n            rv = None\n        return rv\n\n\n\n# ## Main function\n#\n# Add the main  function, where the handler functions above are registered with the Telegram Bot API\n\n# In[10]:\n\ndef main():\n\n    # Load configuration and video database\n    load()\n\n    # Create the EventHandler and pass it your bot's token.\n    updater = Updater(TELEGRAM_API_TOKEN)\n\n    # Get the dispatcher to register handlers\n    dp = updater.dispatcher\n\n    # on different commands - answer in Telegram\n    dp.add_handler(CommandHandler(\"start\", start))\n\n    # radio\n    dp.add_handler(CommandHandler(\"radio\", Radio.telegram_command,\n        pass_args=True, pass_job_queue=True))\n    dp.add_handler(CallbackQueryHandler(Radio.telegram_change_station,\n        pass_job_queue=True))\n\n    # manual player\n    dp.add_handler(CommandHandler(\"play\", Radio.telegram_manual,\n        pass_args=True))\n\n    # on noncommand i.e message - echo the message on Telegram\n    dp.add_handler(MessageHandler(None, receive))\n\n    # log all errors\n    dp.add_error_handler(error)\n\n    # Start the Bot\n    updater.start_polling()\n\n    # Start the player\n    gif_player = VideoPlayer()\n    gif_player.setDaemon(True)\n    # gif_player.start()\n\n    radio = Radio()\n    radio.setDaemon(True)\n    radio.start()\n\n    # Run the bot until the you presses Ctrl-C or the process receives SIGINT,\n    # SIGTERM or SIGABRT. This should be used most of the time, since\n    # start_polling() is non-blocking and will stop the bot gracefully.\n    updater.idle()\n\n    # gif_player.stop()\n    radio.stop()\n\n    global appdata\n    appdata[\"station_playing_sent\"] = None\n    save()\n\n\n\n\n\n# Start your bot by saving this notebook as `display-bot.py` and running `$ python display-bot.py`.\n#\n# Before the main loop is started, database contents are dumped to the cache file, accessible by the frontend script.\n\n# In[11]:\n\nif __name__ == '__main__':\n    main()\n\n",
			"file": "DisplayBot.py",
			"file_size": 24916,
			"file_write_time": 131286508300000000,
			"settings":
			{
				"buffer_size": 24895,
				"line_ending": "Unix"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 127.0,
		"last_filter": "wrap",
		"selected_items":
		[
			[
				"wrap",
				"Word Wrap: Toggle"
			],
			[
				"build",
				"Build With: Python"
			],
			[
				"bu",
				"Build With: Python"
			],
			[
				"",
				"File: Copy Path"
			],
			[
				"rename",
				"File: Rename"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"java",
				"Set Syntax: JavaScript"
			],
			[
				"jija",
				"Set Syntax: Jinja2"
			],
			[
				"prettif",
				"HTMLPrettify"
			],
			[
				"jinja",
				"Set Syntax: HTML (Jinja2)"
			],
			[
				"js",
				"Set Syntax: JavaScript"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"side",
				"View: Toggle Side Bar"
			],
			[
				"markdo",
				"Set Syntax: Markdown"
			],
			[
				"package",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"mini",
				"View: Toggle Minimap"
			],
			[
				"git diff ",
				"Git: Diff Current File"
			],
			[
				"shell",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"git reset",
				"Git: Reset (unstage) Current File"
			],
			[
				"close all",
				"File: Close All"
			],
			[
				"diff cu",
				"Git: Diff Current File"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add Current File"
			],
			[
				"git diff",
				"Git: Diff All Files"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git amm",
				"Git: Amend Commit"
			],
			[
				"promote",
				"File: Copy Path From Project Encoded"
			],
			[
				"git pl",
				"Git: Pull"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"git rese",
				"Git: Reset (hard) HEAD"
			],
			[
				"git pull cu",
				"Git: Pull Current Branch"
			],
			[
				"git pul",
				"Git: Pull Current Branch"
			],
			[
				"git res",
				"Git: Reset (hard) HEAD"
			],
			[
				"reset cu",
				"Git: Reset (unstage) Current File"
			],
			[
				"git reset ",
				"Git: Reset (hard) HEAD"
			],
			[
				"dif",
				"Git: Diff Current File"
			],
			[
				"diff ",
				"FileDiffs: Menu"
			],
			[
				"diff",
				"Git: Diff Current File"
			],
			[
				"rempv",
				"Package Control: Remove Package"
			],
			[
				"git reset hea",
				"Git: Reset (hard) HEAD"
			],
			[
				"open",
				"File: Open In Browser - Production Server"
			],
			[
				"reset",
				"Git: Reset (hard) HEAD"
			],
			[
				"diff current",
				"Git: Diff Current File"
			],
			[
				"current ",
				"Git: Diff Current File"
			],
			[
				"diff curr",
				"Git: Diff Current File"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"modi",
				"Modific: Revert modified part"
			],
			[
				"modif",
				"Modific: Show diff"
			],
			[
				"def",
				"Preferences: Settings - Default"
			],
			[
				"conver",
				"Indentation: Convert to Spaces"
			],
			[
				"spaces",
				"Indentation: Convert to Spaces"
			],
			[
				"synt dif",
				"Set Syntax: Diff"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"py lint",
				"User: Python Flake8 Lint"
			],
			[
				"synta diff",
				"Set Syntax: Diff"
			],
			[
				"sideba",
				"View: Toggle Side Bar"
			],
			[
				"how",
				"How do I"
			],
			[
				"sublimerge",
				"Sublimerge: Show Changes Introduced in Revision..."
			],
			[
				"pyt",
				"Set Syntax: Python"
			],
			[
				"git commit",
				"Set Syntax: Git Commit Message"
			],
			[
				"isnt",
				"Package Control: Install Package"
			],
			[
				"linter",
				"SublimeLinter: Choose Gutter Theme"
			],
			[
				"lint",
				"SublimeLinter: Choose Mark Style"
			],
			[
				"gutt",
				"SublimeLinter: Choose Gutter Theme"
			],
			[
				"gut",
				"SublimeLinter: Choose Gutter Theme"
			],
			[
				"flak",
				"User: Python Flake8 Lint"
			],
			[
				"pylin",
				"User: Python Flake8 Lint"
			],
			[
				"view",
				"View: Toggle Side Bar"
			],
			[
				"less",
				"Set Syntax: LESS"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"git",
				"GitStatus: Changed files"
			],
			[
				"py",
				"Set Syntax: Python"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"modific",
				"Modific: Show diff"
			],
			[
				"pref",
				"Preferences: Settings - User"
			],
			[
				"syntax c",
				"Set Syntax: C"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"sql",
				"Set Syntax: SQL"
			],
			[
				"javasc",
				"Set Syntax: JavaScript"
			],
			[
				"markd",
				"Set Syntax: Markdown"
			],
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"mat",
				"Set Syntax: MATLAB"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"snipp",
				"Snippet: #!/usr/bin/env"
			],
			[
				"dis",
				"SublimeLinter: Disable Linting"
			],
			[
				"disab",
				"SublimeLinter: Disable Linting"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"lint di",
				"SublimeLinter: Disable Linting"
			],
			[
				"lint dis",
				"SublimeCodeIntel: Disable Plugin"
			],
			[
				"liunt",
				"SublimeLinter: Lint Current File"
			],
			[
				"disa",
				"SublimeLinter: Disable Linting"
			],
			[
				"try",
				"Snippet: Try/Except"
			],
			[
				"except",
				"Snippet: Try/Except"
			],
			[
				"codeintel",
				"SublimeCodeIntel: Enable Plugin"
			],
			[
				"plugin",
				"SublimeCodeIntel: Disable Plugin"
			],
			[
				"status",
				"Git: Status"
			],
			[
				"stack",
				"Stackoverflow: Search Selection"
			],
			[
				"stat",
				"Git: Status"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"sta",
				"Git: Status"
			],
			[
				"git sta",
				"Git: Status"
			],
			[
				"background",
				"SublimeLinter: Enable Background Linting"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 124.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": true,
		"side_bar_visible": false,
		"status_bar_visible": true
	},
	"expanded_folders":
	[
		"/Users/vaul/Projects/displaybot/venv/displaybot",
		"/Users/vaul/.displayBot"
	],
	"file_history":
	[
		"/Users/vaul/Projects/displaybot/venv/displaybot/LICENSE",
		"/Users/vaul/Projects/displaybot/venv/displaybot/frontend/src/App.js",
		"/Users/vaul/Projects/displaybot/frontend/src/components/Layout/Layout.js",
		"/Users/vaul/.jupyter/custom/custom.css",
		"/Users/vaul/Projects/displaybot/DisplayBot.py",
		"/Users/vaul/Projects/vahrend11/static/index.html",
		"/Users/vaul/Downloads/mail.html",
		"/Users/vaul/Projects/vahrend11/index.yaml",
		"/Users/vaul/Projects/saybot/venv/gtsample.py",
		"/Users/vaul/backups/vamail_backup.log",
		"/Users/vaul/Projects/fip_playlist/fip3.py",
		"/Users/vaul/Downloads/hypernormalisation.(2016).eng.1cd.(6769470)/BBC.HyperNormalisation.720p.h264.AAC.MVGroup.srt",
		"/Users/vaul/backups/backup_nichte.sh",
		"/Users/vaul/backups/backup_vahrend.sh",
		"/Users/vaul/Projects/saybot/venv/trans.py",
		"/Users/vaul/backups/backup_gmail.sh",
		"/Users/vaul/Projects/fip_playlist/fip.py",
		"/Applications/Civ6.app/Contents/Assets/Base/Assets/UI/ToolTips/PlotToolTip.lua",
		"/Users/vaul/Projects/ultimate-flask-front-end-2.1/project/app.py",
		"/Users/vaul/Projects/ultimate-flask-front-end-2.1/project/templates/hello.html",
		"/Users/vaul/Downloads/Always mobile Wikipedia (1).user.js",
		"/Users/vaul/Projects/Instant-Movie-Streamer/bin/ims",
		"/Users/vaul/Projects/pete/peter.log",
		"/Users/vaul/Projects/pete/diary-peter/diary_peter/coaches.py",
		"/Users/vaul/Projects/pete/diary-peter/main.py",
		"/usr/local/bin/ims",
		"/Users/vaul/Projects/pete/diary-peter/diary_peter/jobs.py",
		"/Users/vaul/Projects/pete/diary-peter/setup.script.mdown",
		"/Users/vaul/Projects/pete/diary-peter/setup.py",
		"/Users/vaul/Projects/pete/diary-peter/requirements.txt",
		"/Users/vaul/Projects/pete/diary-peter/empty_database.py",
		"/Users/vaul/Projects/pete/diary-peter/create_database.py",
		"/Users/vaul/Projects/pete/diary-peter/tests/test_models.py",
		"/Users/vaul/Projects/pete/diary-peter/tests/test_coaches.py",
		"/Users/vaul/Projects/pete/diary-peter/diary_peter/__init__.py",
		"/Users/vaul/Projects/pete/diary-peter/diary_peter/keyboards.py",
		"/Users/vaul/Projects/pete/diary-peter/diary_peter/models.py",
		"/Users/vaul/Projects/pete/diary-peter/tests/conftest.py",
		"/Users/vaul/Projects/pete/diary-peter/LICENSE",
		"/Users/vaul/Projects/pete/diary-peter/diary_peter/utils.py",
		"/Users/vaul/Projects/pete/diary-peter/jobs.py",
		"/Users/vaul/Projects/pete/diary-peter/utils.py",
		"/Users/vaul/Projects/pete/Models.md",
		"/Users/vaul/Projects/pete/diary-peter/inlinebot.py",
		"/Users/vaul/Projects/pete/diary-peter/diary_peter/handlers.py",
		"/Users/vaul/Library/Application Support/Sublime Text 3/Packages/User/pdb_snippet",
		"/Users/vaul/Projects/pete/diary-peter/diary_peter/dispatchers.py",
		"/Users/vaul/Projects/pete/diary-peter/tests/test_dispatchers.py",
		"/Users/vaul/Projects/soumaenv/souma/setup.py",
		"/Users/vaul/Projects/pete/lib/python3.5/site-packages/telegram/ext/updater.py",
		"/Users/vaul/Projects/pete/diary-peter/tests/util.py",
		"/Users/vaul/Projects/pete/diary-peter/diary_peter/tests/test_models.py",
		"/Users/vaul/Projects/pete/diary-peter/tests/test_base.py",
		"/Users/vaul/Projects/pete/diary-peter/setup.sh",
		"/Users/vaul/Projects/pete/diary-pete/diary-pete/models.py",
		"/Users/vaul/Projects/cognitive_networks/app/.gitignore",
		"/Volumes/Logbook/Logbook/process.sh",
		"/Users/vaul/Projects/soumaenv/glia/glia/web/views.py",
		"/Users/vaul/Projects/simpleWeather/simpleWeather.py",
		"/Users/vaul/Projects/cognitive_networks/app/app.yaml",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/nucleus/jobs.py",
		"/Users/vaul/Downloads/zann.epub",
		"/Users/vaul/Downloads/zann.mobi",
		"/Users/vaul/Desktop/bla.txt",
		"/Users/vaul/Desktop/8ee6289bb45ff4fee154a382d574514b.jpg",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/conftest.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/tests/test_content.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/tests/test_context.py",
		"/Users/vaul/Projects/soumaenv/glia/.gitignore",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/nucleus/__init__.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/nucleus/helpers.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/nucleus/content.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/nucleus/identity.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/nucleus/context.py",
		"/Users/vaul/Projects/soumaenv/glia/.coverage",
		"/Users/vaul/Projects/soumaenv/glia/glia/web/helpers.py",
		"/Users/vaul/Projects/soumaenv/glia/worker.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/tests/test_connections.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/tests/test_helpers.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/tests/test_identity.py",
		"/Users/vaul/Projects/soumaenv/glia/glia/web/forms.py",
		"/Users/vaul/Projects/soumaenv/glia/default_config.py",
		"/Users/vaul/Dropbox/Studium/ba/rktik-thesis/03_implementation.md",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/nucleus/base.py",
		"/Users/vaul/Projects/glia-test-reqs/gliaenv/lib/python2.7/site-packages/sqlalchemy/engine/base.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/nucleus/connections.py",
		"/Users/vaul/Projects/soumaenv/glia/glia/__init__.py",
		"/Users/vaul/Projects/soumaenv/glia/development_config.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/nucleus/tests/test_connections.py",
		"/Users/vaul/Projects/soumaenv/glia/requirements.txt",
		"/Users/vaul/Projects/soumaenv/glia/glia/templates/persona_blog.html",
		"/Users/vaul/Projects/soumaenv/glia/glia/templates/movement_blog.html",
		"/Users/vaul/Projects/soumaenv/glia/glia/templates/macros/helpers.html",
		"/Users/vaul/Projects/soumaenv/glia/glia/templates/macros/chat.html",
		"/Users/vaul/Projects/soumaenv/glia/glia/templates/movement_list.html",
		"/Users/vaul/Projects/soumaenv/glia/glia/templates/movement_mindspace.html",
		"/Users/vaul/Projects/soumaenv/glia/glia/templates/notebook.html",
		"/Users/vaul/Projects/soumaenv/glia/glia/templates/notifications.html",
		"/Users/vaul/Projects/soumaenv/glia/glia/templates/persona.html",
		"/Users/vaul/Projects/soumaenv/glia/glia/templates/base.html",
		"/Users/vaul/Projects/soumaenv/glia/glia/templates/debug.html",
		"/Users/vaul/Projects/soumaenv/souma/web_ui/pagemanager.py",
		"/Users/vaul/Projects/soumaenv/glia/glia/web/events.py",
		"/Users/vaul/Projects/soumaenv/glia/glia/web/async.py",
		"/Users/vaul/Projects/soumaenv/glia/glia/helpers.py",
		"/Users/vaul/Projects/soumaenv/lib/python2.7/site-packages/flask/config.py",
		"/usr/local/lib/python2.7/site-packages/flask_sqlalchemy/__init__.py",
		"/Users/vaul/Projects/soumaenv/glia/run_server.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/nucleus/identities.py",
		"/Users/vaul/Projects/glia-test-reqs/gliaenv/lib/python2.7/site-packages/sqlalchemy/orm/identity.py",
		"/Users/vaul/Projects/soumaenv/glia/migrations_extra/has_blogged.py",
		"/Users/vaul/Projects/soumaenv/glia/migrations_extra/mindspace_upgrade.py",
		"/Users/vaul/Projects/soumaenv/glia/migrations_extra/comment_count.py",
		"/Users/vaul/Projects/soumaenv/glia/glia/web/__init__.py",
		"/usr/local/lib/python2.7/site-packages/sqlalchemy/ext/declarative/api.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/nucleus/models.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/__init__.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/nucleus/models/base.py",
		"/Users/vaul/Projects/soumaenv/glia/glia/templates/index.html",
		"/Users/vaul/Downloads/synthetics.har.json",
		"/Users/vaul/Projects/soumaenv/glia/manage.py",
		"/Users/vaul/Projects/soumaenv/glia/production_config.py",
		"/Users/vaul/Projects/soumaenv/glia/testing_config.py",
		"/usr/local/lib/python2.7/site-packages/flask_rq.py",
		"/Users/vaul/Projects/soumaenv/glia/glia/static/js/main.js",
		"/Users/vaul/Projects/soumaenv/glia/glia/api/myelin.py",
		"/Users/vaul/Projects/soumaenv/glia/migrations/versions/41f11e397f3c_remove_vesicle.py",
		"/Users/vaul/Projects/soumaenv/glia/nucleus/nucleus/vesicle.py"
	],
	"find":
	{
		"height": 25.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/vaul/Projects/pete/diary-peter/",
			"/Users/vaul/Projects/soumaenv/glia/",
			"/Users/vaul/Projects/soumaenv/glia/nucleus/",
			"/Users/vaul/Projects/soumaenv/glia/",
			"/Users/vaul/Projects/soumaenv/glia/nucleus/tests",
			"/Users/vaul/Projects/soumaenv/glia/",
			"/Users/vaul/Projects/soumaenv/glia/nucleus",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/soumaenv/glia/",
			"/Users/vaul/Projects/soumaenv/glia/glia/templates/",
			"/Users/vaul/Projects/soumaenv/glia/templates/",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/soumaenv/",
			"/Users/vaul/Projects/soumaenv/glia/",
			"/Users/vaul/Projects/soumaenv/glia/nucleus/",
			"/Users/vaul/Projects/soumaenv/glia/nucleus/models.py",
			"/Users/vaul/Projects/soumaenv/glia/",
			"/Users/vaul/Projects/soumaenv/glia/nucleus",
			"/Users/vaul/Projects/soumaenv/nucleus",
			"/Users/vaul/Projects/soumaenv/",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/soumaenv/",
			"/Users/vaul/Projects/soumaenv/nucleus",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/glia-test-reqs/gliaenv/lib/python2.7/site-packages/sqlalchemy",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/",
			"/Users/vaul/Projects/soumaenv/",
			"/Users/vaul/Projects/soumaenv/glia/",
			"/Users/vaul/Projects/soumaenv/glia/migrations",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/soumaenv/glia/nucleus",
			"/Users/vaul/Projects/soumaenv/nucleus",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/soumaenv/glia/nucleus",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/soumaenv/glia/nucleus",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/soumaenv/nucleus",
			"/Users/vaul/Projects/soumaenv/glia/",
			"/Users/vaul/Projects/soumaenv/glia/glia/templates",
			"/Users/vaul/Projects/soumaenv/glia/templates",
			"/Users/vaul/Projects/soumaenv/glia/",
			"/Users/vaul/Projects/soumaenv/glia/glia/templates",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/soumaenv/nucleus",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/soumaenv/nucleus",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/soumaenv/nucleus",
			"/Users/vaul/Projects/soumaenv/souma",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/soumaenv/souma",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/soumaenv/",
			"/Users/vaul/Projects/soumaenv/nucleus/",
			"/Users/vaul/Projects/soumaenv/glia/",
			"/Users/vaul/Projects/soumaenv/",
			"/Users/vaul/Projects/soumaenv/glia/",
			"/Users/vaul/Projects/soumaenv/glia/glia/",
			"/Users/vaul/Projects/soumaenv/glia/glia/api",
			"/Users/vaul/Projects/soumaenv/glia/",
			"/Users/vaul/Projects/soumaenv/glia/models.py",
			"/Users/vaul/Projects/soumaenv/glia",
			"/Users/vaul/Projects/soumaenv/nucleus",
			"/Users/vaul/Projects/soumaenv/rktik",
			"/Users/vaul/Projects/soumaenv/",
			"/Users/vaul/Projects/soumaenv/glia/",
			"/Users/vaul/Projects/soumaenv/",
			"/Users/vaul/Projects/soumaenv/souma/",
			"/Users/vaul/Projects/soumaenv/rktik/",
			"/Users/vahrend/Projects/soumaenv/rktik/",
			"/Users/vahrend/Projects/soumaenv/souma/",
			"/Users/vahrend/Projects/soumaenv/",
			"/Users/vahrend/Projects/soumaenv/souma/",
			"/Users/vahrend/Projects/soumaenv/souma/astrolab/",
			"/Users/vahrend/Projects/soumaenv/souma/",
			"/Users/vahrend/Projects/souma-2/lib/python2.7/site-packages/py2app",
			"/Users/vahrend/Projects/souma-2/soma/",
			"/Users/vahrend/Projects/khemia/soma/",
			"/Users/vahrend/Projects/khemia/glia/",
			"/Users/vahrend/Projects/khemia/soma/",
			"/Users/vahrend/Projects/khemia/glia/",
			"/Users/vahrend/Projects/khemia/soma/",
			"/Users/vahrend/Projects/khemia/glia/",
			"/Users/vahrend/Projects/khemia/soma/",
			"/Users/vahrend/Projects/khemia/glia/",
			"/Users/vahrend/Projects/khemia/soma/",
			"/Users/vahrend/Projects/khemia/",
			"/Users/vahrend/Projects/khemia/glia",
			"/Users/vahrend/Projects/khemia/soma",
			"DBVesicle",
			"/Users/vahrend/Projects/khemia/",
			"/Users/vahrend/Projects/khemia/soma",
			"this",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"jsonfile",
			" -t full ",
			" -t quick",
			"__fiptime",
			"res",
			"sur <span",
			"lightroom",
			"waveshare32b",
			"hours=6",
			"text",
			"inline_",
			"timede",
			"You can alwa",
			"AVAILABLE_COACH",
			"import logger",
			"create_users(",
			"logging",
			"AVAILABLE_COACHES",
			"logging",
			"scheduled",
			"job",
			"config",
			"g.user",
			"reason",
			"self",
			"rv",
			"config",
			"Markdown",
			"AVAILABLE_COACH",
			"self",
			" - 1",
			"t",
			"len(self.collector)",
			"Setup(",
			"Menu(",
			"cls",
			"user",
			"datetime",
			"new_",
			"CoachSetup",
			"sendMessage(update.message.chat_id",
			"hide",
			"False",
			"callback_query",
			"data",
			".message",
			"message",
			"coach_update",
			"setup_update",
			"Goal",
			"keyboard_options",
			"text",
			"chat_id",
			"update.message.from_user",
			"Setup.",
			"MAIN",
			"menu.main",
			"new_user(",
			"state_coach",
			"state_module",
			"addHandler",
			"markdown",
			"config_update",
			"Config",
			"nickname",
			"first_name",
			"Menu",
			"Config",
			"[\"",
			"],",
			"*:",
			"**",
			"uuid4",
			"db",
			"create_table",
			"user",
			"tguser",
			"update",
			"test_database",
			"config_updates",
			"keyboard",
			"messages",
			", create_tables=True",
			"user",
			"print",
			"debug",
			"info",
			"telegram.",
			"updater.dispatcher",
			"class",
			"CharField",
			"get_chat",
			"cls.query.",
			"movements[0]",
			"personas[0]",
			"\"update\"",
			"blog",
			"\"read\"",
			"read",
			"\"read\"",
			"members =",
			"movements[0]",
			"personas[0]",
			"movement",
			"raises(",
			"Test title",
			"look",
			"look it is",
			"OWLS",
			"owls",
			"default=",
			"super(",
			"*args, **kwargs",
			", default=datetime.datetime.utcnow()",
			"ALLOWED_ACTIONS",
			"ms",
			"=",
			", ",
			"notif",
			"notifications",
			"notifi",
			"pt",
			"tp",
			"thought_with_attachments.percept_assocs",
			"TagPercept(",
			".hot ",
			"top ",
			"nocache"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"ACCESS_MODES",
			"active_persona",
			"Text",
			"ForeignKey",
			"backref",
			"relationship",
			"Table",
			"DateTime",
			"Boolean",
			"Integer",
			"String",
			"Column",
			"startswith",
			"UPVOTE",
			"upvote",
			"Upvote",
			"upvoted",
			"souma",
			"Souma",
			"SOUMA",
			"Souma",
			"souma",
			"rktik",
			"Rktik",
			"RKTIK",
			"PERCEPT",
			"percept",
			"Percept",
			"thought",
			"Thought",
			"thought",
			"THOUGHT",
			"thought.",
			"Thought.",
			"MINDSET",
			"mindset",
			"Mindset",
			"THOUGHT",
			"thought",
			"Thought",
			"thought",
			"Thought",
			"UPVOTE",
			"upvote",
			"Upvote",
			"CLIENT_NOT_FOUND",
			"RKTIK",
			"rktik",
			"Rktik",
			"percept",
			"Percept",
			"PERCEPT",
			"THOUGHT",
			"thought",
			"Thought",
			"Mindset",
			"mindset",
			"Mindset",
			"_insert_required",
			"_update_required",
			"   - ",
			"ark",
			"",
			"Ark",
			"Arche"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "displaybot.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 91,
						"regions":
						{
						},
						"selection":
						[
							[
								44,
								44
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "DisplayBot.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24895,
						"regions":
						{
						},
						"selection":
						[
							[
								377,
								377
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"default_dir": "/Users/vaul/Projects/displaybot/venv/displaybot",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 30.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 267.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 92.0
	},
	"output.sftp":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "displaybot.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"main",
				"diary-peter/main.py"
			],
			[
				"job",
				"diary-peter/diary_peter/jobs.py"
			],
			[
				"coaches",
				"diary-peter/diary_peter/coaches.py"
			],
			[
				"empt",
				"diary-peter/empty_database.py"
			],
			[
				"crea",
				"diary-peter/create_database.py"
			],
			[
				"utils",
				"diary-peter/diary_peter/utils.py"
			],
			[
				"testmode",
				"diary-peter/tests/test_models.py"
			],
			[
				"coach",
				"diary-peter/diary_peter/coaches.py"
			],
			[
				"model",
				"diary-peter/diary_peter/models.py"
			],
			[
				"mode",
				"diary-peter/diary_peter/models.py"
			],
			[
				"jobs",
				"glia/nucleus/nucleus/jobs.py"
			],
			[
				"views",
				"glia/glia/web/views.py"
			],
			[
				"gitign",
				"glia/.gitignore"
			],
			[
				"cover",
				"glia/.coverage"
			],
			[
				"iden",
				"glia/nucleus/nucleus/identity.py"
			],
			[
				"helper",
				"glia/nucleus/nucleus/helpers.py"
			],
			[
				"webhelp",
				"glia/glia/web/helpers.py"
			],
			[
				"testcontent",
				"glia/nucleus/tests/test_content.py"
			],
			[
				"content",
				"glia/nucleus/nucleus/content.py"
			],
			[
				"ident",
				"glia/nucleus/nucleus/identity.py"
			],
			[
				"nucini",
				"glia/nucleus/nucleus/__init__.py"
			],
			[
				"conf",
				"glia/nucleus/conftest.py"
			],
			[
				"testcont",
				"glia/nucleus/tests/test_context.py"
			],
			[
				"context",
				"glia/nucleus/nucleus/context.py"
			],
			[
				"testcontex",
				"glia/nucleus/tests/test_context.py"
			],
			[
				"testconn",
				"glia/nucleus/tests/test_connections.py"
			],
			[
				"workr",
				"glia/worker.py"
			],
			[
				"help",
				"glia/nucleus/nucleus/helpers.py"
			],
			[
				"view",
				"glia/glia/web/views.py"
			],
			[
				"testiden",
				"glia/nucleus/tests/test_identity.py"
			],
			[
				"contex",
				"glia/nucleus/nucleus/context.py"
			],
			[
				"testident",
				"glia/nucleus/tests/test_identity.py"
			],
			[
				"conftes",
				"glia/nucleus/conftest.py"
			],
			[
				"defa",
				"glia/default_config.py"
			],
			[
				"webform",
				"glia/glia/web/forms.py"
			],
			[
				"form",
				"glia/glia/web/forms.py"
			],
			[
				"nuctest",
				"glia/nucleus/tests/test_content.py"
			],
			[
				"base",
				"glia/nucleus/nucleus/base.py"
			],
			[
				"connec",
				"glia/nucleus/tests/test_connections.py"
			],
			[
				"nucbas",
				"glia/nucleus/nucleus/base.py"
			],
			[
				"confte",
				"glia/nucleus/conftest.py"
			],
			[
				"identity",
				"glia/nucleus/nucleus/identity.py"
			],
			[
				"testconnec",
				"glia/nucleus/tests/test_connections.py"
			],
			[
				"gliaini",
				"glia/glia/__init__.py"
			],
			[
				"devel",
				"glia/development_config.py"
			],
			[
				"worker",
				"glia/worker.py"
			],
			[
				"req",
				"glia/requirements.txt"
			],
			[
				"personablog",
				"glia/glia/templates/persona_blog.html"
			],
			[
				"movbl",
				"glia/glia/templates/movement_blog.html"
			],
			[
				"webhel",
				"glia/glia/web/helpers.py"
			],
			[
				"conte",
				"glia/nucleus/nucleus/content.py"
			],
			[
				"contet",
				"glia/nucleus/nucleus/content.py"
			],
			[
				"nuche",
				"glia/nucleus/nucleus/helpers.py"
			],
			[
				"helpers",
				"glia/glia/web/helpers.py"
			],
			[
				"nuccon",
				"glia/nucleus/nucleus/content.py"
			],
			[
				"deve",
				"glia/development_config.py"
			],
			[
				"ini",
				"glia/glia/__init__.py"
			],
			[
				"maccha",
				"glia/glia/templates/macros/chat.html"
			],
			[
				"nucbsas",
				"glia/nucleus/nucleus/base.py"
			],
			[
				"nucbase",
				"glia/nucleus/nucleus/base.py"
			],
			[
				"gliahel",
				"glia/glia/helpers.py"
			],
			[
				"dev",
				"glia/development_config.py"
			],
			[
				"run_s",
				"glia/run_server.py"
			],
			[
				"con",
				"glia/nucleus/nucleus/content.py"
			],
			[
				"defaul",
				"glia/default_config.py"
			],
			[
				"nucmod",
				"glia/nucleus/nucleus/models.py"
			],
			[
				"basehtml",
				"glia/glia/templates/base.html"
			],
			[
				"index",
				"glia/glia/templates/index.html"
			],
			[
				"runs",
				"glia/run_server.py"
			],
			[
				"mana",
				"glia/manage.py"
			],
			[
				"events",
				"glia/glia/web/events.py"
			],
			[
				"def",
				"glia/default_config.py"
			],
			[
				"produc",
				"glia/production_config.py"
			],
			[
				"testingcon",
				"glia/testing_config.py"
			],
			[
				"main.js",
				"glia/glia/static/js/main.js"
			],
			[
				"work",
				"glia/worker.py"
			],
			[
				"event",
				"glia/glia/web/events.py"
			],
			[
				"mod",
				"glia/nucleus/nucleus/models.py"
			],
			[
				"produ",
				"glia/production_config.py"
			],
			[
				"testing",
				"glia/testing_config.py"
			],
			[
				"vesicle",
				"glia/migrations/versions/41f11e397f3c_remove_vesicle.py"
			],
			[
				"nuc",
				"glia/nucleus/__init__.py"
			],
			[
				"gliain",
				"glia/glia/__init__.py"
			],
			[
				"apiview",
				"glia/glia/api/views.py"
			],
			[
				"procf",
				"glia/Procfile"
			],
			[
				"testingconf",
				"glia/testing_config.py"
			],
			[
				"nuchel",
				"glia/nucleus/nucleus/helpers.py"
			],
			[
				"models",
				"glia/nucleus/nucleus/models.py"
			],
			[
				"asy",
				"glia/glia/web/async.py"
			],
			[
				"config",
				"glia/development_config.py"
			],
			[
				"runserv",
				"glia/run_server.py"
			],
			[
				"test",
				"glia/run_tests.py"
			],
			[
				"gliainit",
				"glia/glia/__init__.py"
			],
			[
				"nucda",
				"glia/nucleus/nucleus/database.py"
			],
			[
				"conn",
				"glia/glia/static/config.json"
			],
			[
				"nuchelp",
				"glia/nucleus/nucleus/helpers.py"
			],
			[
				"proc",
				"glia/Procfile"
			],
			[
				"async",
				"glia/glia/web/async.py"
			],
			[
				"database",
				"glia/nucleus/nucleus/database.py"
			],
			[
				"nucle",
				"glia/nucleus/__init__.py"
			],
			[
				"run",
				"glia/run_server.py"
			],
			[
				"util",
				"glia/utility.py"
			],
			[
				"base.html",
				"glia/glia/templates/base.html"
			],
			[
				"thought",
				"glia/glia/templates/thought.html"
			],
			[
				"develop",
				"glia/development_config.py"
			],
			[
				"init",
				"glia/glia/__init__.py"
			],
			[
				"webinit",
				"glia/glia/web/__init__.py"
			],
			[
				"side",
				"sqlalchemy/orm/identity.py"
			],
			[
				"prod",
				"glia/production_config.py"
			],
			[
				"pushtest",
				"glia/push_testing.sh"
			],
			[
				"reque",
				"glia/requirements.txt"
			],
			[
				"mindspa",
				"glia/glia/templates/movement_mindspace.html"
			],
			[
				"macth",
				"glia/glia/templates/macros/thought.html"
			],
			[
				"gliahelp",
				"glia/glia/helpers.py"
			],
			[
				"inde",
				"glia/glia/templates/index.html"
			],
			[
				"though",
				"glia/glia/templates/thought.html"
			],
			[
				"push",
				"glia/push_production.sh"
			],
			[
				"nucmo",
				"nucleus/nucleus/models.py"
			],
			[
				"temth",
				"glia/templates/thought.html"
			],
			[
				"mainjs",
				"glia/static/js/main.js"
			],
			[
				"pers",
				"glia/templates/persona.html"
			],
			[
				"person",
				"glia/templates/persona.html"
			],
			[
				"movemenlis",
				"glia/templates/movement_list.html"
			],
			[
				"note",
				"glia/templates/notebook.html"
			],
			[
				"main.les",
				"glia/static/less/main.less"
			],
			[
				"main.less",
				"glia/static/less/main.less"
			],
			[
				"movemmind",
				"glia/templates/movement_mindspace.html"
			],
			[
				"create",
				"glia/templates/create_thought.html"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/soumaenv/souma.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 167.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
